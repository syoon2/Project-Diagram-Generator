plugins {
  id "com.gorylenko.gradle-git-properties" version "2.5.2"
  id 'io.freefair.aggregate-javadoc' version '8.14'
  id "io.freefair.javadoc-links" version "8.14"
}

ext {
  batikVersion = '1.19'
  junit5Version = '5.13.3'
  log4jVersion = '2.25.1'
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
  }
}

dependencies {
  rootProject.subprojects { subproject ->
    subproject.plugins.withId("java") {
      javadoc subproject
    }
  }
}

subprojects {
  group = 'com.github.syoon2.pdg'
  version = '2.1.0-dev'

  apply plugin: 'java'
  apply plugin: "com.gorylenko.gradle-git-properties"
  apply plugin: "io.freefair.javadoc-links"

  java {
    // Assume Java 11
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    // JUnit 5 / Jupiter
    testImplementation(platform("org.junit:junit-bom:${junit5Version}"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // Apache Commons
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.18.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.20.0'

    // Apache Log4j2
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4jVersion}"

  }

  test {
    dependsOn cleanTest
    testLogging.showStandardStreams = true
  }

  tasks.named('test', Test) {
      useJUnitPlatform()
    }

  // Options when compiling tests
  compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
      '-Xlint:unchecked',
      '-Xlint:deprecation'
    ]
  }

  task buildDependenciesFolder(type: Copy) {
    from configurations.implementation
    into './dependencies'
  }
}

project(':pdg-api') {
  jar { enabled = true }
}

project(':pdg-launcher') {
  dependencies {
    implementation project(':pdg-api')
  }
}

allprojects {
  tasks.withType(JavaCompile) {
    dependsOn generateGitProperties
    options.encoding = 'UTF-8'
    options.compilerArgs += [
      '-Xlint:unchecked',
      '-Xlint:deprecation'
    ]
  }
  gitProperties {
    gitPropertiesName = "git.properties"
  }
  task printAllDependencies(type: DependencyReportTask) {}
  tasks.withType(Jar) {
    manifest {
      attributes('Implementation-Title': project.name,
                 'Implementation-Version': project.version)
    }
  }

}
