plugins {
  id 'application'
}

dependencies {
  // Parsing API
  implementation project(':pdg-api')

  // Apache Batik
  runtimeOnly group: 'org.apache.xmlgraphics', name: 'batik-rasterizer', version: "${batikVersion}"
  implementation group: 'org.apache.xmlgraphics', name: 'batik-swing', version: "${batikVersion}"

  // Apache Commons CLI
  implementation group: 'commons-cli', name: 'commons-cli', version: '1.9.0'

  // Apache Commons Collections
  implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.5.0'

  // Apache Log4j2
  runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4jVersion}"
  runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"

  // OpenJDK Nashorn
  runtimeOnly group: 'org.openjdk.nashorn', name: 'nashorn-core', version: '15.6'

  // FlatLaf
  runtimeOnly group: 'com.formdev', name: 'flatlaf', version: '3.6.2'

  // jSystemThemeDetector
  implementation group: 'com.github.Dansoftowner', name: 'jSystemThemeDetector', version: '3.9.1'

}

ext {
  javaMainClass = 'main.PDGLauncher'
}

application {
  mainClass = javaMainClass
}

jar {
  manifest {
    attributes(
      "Main-Class": javaMainClass
    )
  }
}

task uberJar(type: Jar) {
  manifest {
    attributes(
      "Main-Class": javaMainClass,
      'Multi-Release': 'true'
    )
  }

  archiveClassifier = 'uber'

  from sourceSets.main.output

  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
  }
}
